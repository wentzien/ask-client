{"version":3,"sources":["components/questionForm.jsx","components/question.jsx","components/questions.jsx","components/events.jsx","components/manageEvents.jsx","components/notFound.js","components/home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["QuestionForm","state","question","errors","schema","Joi","string","min","max","required","label","joiSchema","object","validate","result","abortEarly","error","details","item","path","message","validateProperty","name","value","obj","handleSubmit","e","preventDefault","setState","callServer","props","onSubmit","handleChange","input","currentTarget","errorMessage","className","this","onChange","type","id","aria-describedby","disabled","style","width","Component","Question","renderIcon","localStorage","getItem","data","onVote","onClick","cursor","maxWidth","votes","Questions","questions","map","q","key","Events","urlApi","newQuestion","a","eventId","match","params","event_id","socket","emit","voteQuestion","questionId","axios","put","handleVote","index","indexOf","setItem","io","sort","b","on","off","ManageEvents","NotFound","margin","Home","redirect","handleNewEvent","generateId","characters","charactersLength","length","i","charAt","Math","floor","random","display","justifyContent","alignItems","marginTop","to","App","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.81178fa7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Joi from 'joi-browser';\r\n\r\nclass QuestionForm extends Component {\r\n    state = {\r\n        question: {\r\n            question: ''\r\n        },\r\n        errors: {}\r\n    };\r\n\r\n    schema = {\r\n        question: Joi.string().min(3).max(512).required().label(\"Question\")\r\n    };\r\n\r\n    joiSchema = Joi.object(this.schema);\r\n\r\n    validate = () => {\r\n        const result = this.joiSchema.validate(this.state.question, {abortEarly: false});\r\n        if (!result.error) return null;\r\n\r\n        const errors = {};\r\n        for (let item of result.error.details)\r\n            errors[item.path[0]] = item.message;\r\n        return errors;\r\n    };\r\n\r\n    validateProperty = ({name, value}) => {\r\n        const obj = {\r\n            [name]: value\r\n        };\r\n        const schema = {\r\n            [name]: this.schema[name]\r\n        };\r\n        const joiPropertySchema = Joi.object(schema);\r\n        const {error} = joiPropertySchema.validate(obj);\r\n        return error ? error.details[0].message : null;\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const errors = this.validate();\r\n        this.setState({errors: errors || {}});\r\n        if (errors) return;\r\n\r\n        this.callServer()\r\n    };\r\n\r\n    callServer = () => {\r\n        const question = this.state.question.question;\r\n        this.props.onSubmit(question);\r\n        this.setState({question: {question: ''}});\r\n    }\r\n\r\n    handleChange = ({currentTarget: input}) => {\r\n        const errors = {...this.state.errors};\r\n        const errorMessage = this.validateProperty(input);\r\n        if (errorMessage) errors[input.name] = errorMessage;\r\n        else delete errors[input.name];\r\n\r\n        const question = {...this.state.question};\r\n        question[input.name] = input.value;\r\n        this.setState({question, errors});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                            {/*<label htmlFor=\"frage\">Frage:</label>*/}\r\n                            <textarea value={this.state.question.question}\r\n                                      onChange={this.handleChange} type=\"text\"\r\n                                      className=\"form-control\"\r\n                                      name=\"question\"\r\n                                      id=\"frage\"\r\n                                      aria-describedby=\"frageHilfe\"/>\r\n                            {this.state.errors.question &&\r\n                            <div className=\"alert alert-danger\">{this.state.errors.question}</div>}\r\n                        </div>\r\n                        <span className=\"float left\">Stell uns deine Frage</span>\r\n                        <button disabled={this.validate()} type=\"submit\"\r\n                                className=\"btn btn-primary float-right\"\r\n                                style={{width: \"150px\"}}\r\n                        >Senden</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionForm;","import React, {Component} from 'react';\r\n\r\nclass Question extends Component {\r\n\r\n    renderIcon = (question) => {\r\n        if (localStorage.getItem(question.id)) return <i className=\"fa fa-heart\" />;\r\n        return <i className=\"fa fa-heart-o\" />;\r\n    }\r\n\r\n    render() {\r\n        const {data, onVote} = this.props;\r\n        return (\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <div>\r\n                            {data.question}\r\n                        </div>\r\n                        <div className=\"mx-auto\" onClick={() => onVote(data)} style={{cursor: \"pointer\", maxWidth: \"50px\", }}>\r\n                            {this.renderIcon(data)} {data.votes}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;","import React, {Component} from 'react';\r\nimport Question from \"./question\";\r\n\r\nclass Questions extends Component {\r\n    render() {\r\n        const {questions, onVote} = this.props;\r\n        return questions.map(q =>\r\n                    <Question\r\n                        key={q.id}\r\n                        data={q}\r\n                        onVote={onVote}\r\n                    />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;","import React, {Component} from 'react';\r\nimport axios from \"axios\";\r\nimport io from \"socket.io-client\";\r\nimport QuestionForm from \"./questionForm\";\r\nimport Questions from \"./questions\";\r\n\r\nclass Events extends Component {\r\n    state = {\r\n        questions: []\r\n    };\r\n\r\n    socket;\r\n\r\n    // urlApi = 'http://localhost:5000';\r\n\r\n    urlApi = 'https://api.originjump.com';\r\n\r\n    async componentDidMount() {\r\n\r\n        this.socket = io(this.urlApi);\r\n\r\n        const {id} = this.props.match.params;\r\n        this.socket.emit(\"join\", {id}, (data) => {\r\n            data.sort((a, b) => b.votes - a.votes);\r\n            this.setState({questions: data});\r\n        });\r\n\r\n        this.socket.on(\"questions\", (questions) => {\r\n            questions.sort((a, b) => b.votes - a.votes);\r\n            this.setState({questions});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.socket.emit(\"disconnect\");\r\n        this.socket.off();\r\n    }\r\n\r\n    newQuestion = async (question) => {\r\n        const {id: eventId} = this.props.match.params;\r\n        const newQuestion = {\r\n            question: question,\r\n            event_id: eventId\r\n        };\r\n\r\n        // const questions = [...this.state.questions];\r\n        // newQuestion.id = response.data.insertId;\r\n        // newQuestion.event_id = eventId;\r\n        // newQuestion.votes = 0;\r\n        // questions.push(newQuestion);\r\n        // this.setState({questions});\r\n\r\n        this.socket.emit(\"newQuestion\", newQuestion);\r\n    }\r\n\r\n    voteQuestion = async (questionId) => {\r\n        await axios.put(this.urlApi + '/questions/' + questionId);\r\n    }\r\n\r\n    handleVote = (question) => {\r\n        if (localStorage.getItem(question.id)) return;\r\n\r\n        let questions = [...this.state.questions];\r\n        const index = questions.indexOf(question);\r\n        question = {...questions[index]};\r\n        question.votes++;\r\n        questions[index] = question;\r\n        this.setState({questions});\r\n        localStorage.setItem(question.id, true);\r\n\r\n        this.socket.emit(\"vote\", question);\r\n    }\r\n\r\n    render() {\r\n        const {questions} = this.state;\r\n        return (\r\n            <div className=\"App\">\r\n                <QuestionForm onSubmit={this.newQuestion}/>\r\n                <Questions questions={questions} onVote={this.handleVote}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Events;","import React, {Component} from 'react';\r\n\r\nclass ManageEvents extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Veranstaltung verwalten</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManageEvents;","import React, {Component} from 'react';\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 style={{margin: \"20px\"}}>Not Found</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React, {Component} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        redirect: \"\"\r\n    };\r\n    handleNewEvent = () => {\r\n        const eventId = this.generateId();\r\n        this.setState({redirect: \"/events/\" + eventId});\r\n    };\r\n\r\n    generateId = () => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < 24; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return result;\r\n    };\r\n\r\n    render() {\r\n        const {redirect} = this.state;\r\n        return (\r\n            <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                <button style={{\r\n                    width: \"700px\",\r\n                    marginTop: \"50px\"\r\n                }} className=\"btn btn-primary\" onClick={this.handleNewEvent}>Neues Event\r\n                </button>\r\n                {redirect ? (<Redirect to={redirect}/>) : ''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport Events from \"./components/events\";\r\nimport ManageEvents from \"./components/manageEvents\";\r\nimport NotFound from \"./components/notFound\";\r\nimport Home from \"./components/home\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Switch>\r\n                    <Route path=\"/events/:id\" component={Events}/>\r\n                    <Route path=\"/admin\" component={ManageEvents}/>\r\n                    <Route path=\"/404\" component={NotFound}/>\r\n                    <Route path=\"/\" component={Home}/>\r\n                    <Route exact path=\"/*\">\r\n                        <Redirect to=\"/404\"/>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <App/>\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}